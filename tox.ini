[tox]
envlist = integration

[testenv:docs]
deps =
    sphinx
    sphinx_rtd_theme
    vcversioner
commands = sphinx-build -W -b html docs/source docs/build/html
commands_pre =
commands_post =

[testenv:integration]
# commands_pre/_post only work in tox 3.4+, but at least in some
# CI configurations they'll tell us if we've leaked resources
commands_pre = python tox_docker/tests/capture_containers_and_volumes.py
commands_post = python tox_docker/tests/assert_containers_and_volumes_unchanged.py

# tests use these containers in various ways -- the full documentation
# is in the test cases themselves. but briefly, two running instances
# of the tcp-udp-test image are used for checking port mapping & linking
# behavior; and two running instances of the healthcheck container are
# used for testing health checking behavior
docker =
    networking-one
    networking-two
    healthcheck-builtin
    healthcheck-custom
    custom-command
deps =
    pytest
setenv =
    VOLUME_DIR={toxworkdir}
commands =
    py.test [] {toxinidir}/tox_docker
    python -c 'import os; os.remove(os.environ["VOLUME_DIR"] + "/healthy")'

[docker:networking-one]
image = ksdn117/tcp-udp-test

[docker:networking-two]
# along with networking-one, proves we can run multiple copies of the same image
image = ksdn117/tcp-udp-test
ports = 2345:1234/tcp
links = networking-one:linked_host

[docker:healthcheck-builtin]
# specify image as full registry URL to prove we can pull that way
image = docker.io/toxdocker/healthcheck:latest
# the default health check start period seems to be 30s, make tests faster
healthcheck_interval = 1
healthcheck_timeout = 1
healthcheck_start_period = 1

[docker:healthcheck-custom]
image = docker.io/toxdocker/healthcheck:latest
healthcheck_cmd = touch /healthcheck/web/healthy
healthcheck_interval = 1
healthcheck_timeout = 1
healthcheck_start_period = 1
volumes =
    bind:rw:{toxworkdir}:/healthcheck/web

[docker:custom-command]
image = ksdn117/tcp-udp-test
cmd = /run.sh with some options

# do NOT add this env to the envlist; it is supposed to fail,
# and the CI scripts run it directly with this expectation
[testenv:healthcheck-failing]
skip_install = true
commands = python -c ""
docker = healthcheck-failing
