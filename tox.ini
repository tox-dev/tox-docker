[tox]
envlist = integration

[testenv:docs]
deps =
    sphinx
    sphinx_rtd_theme
    vcversioner
commands = sphinx-build -W -b html docs/source docs/build/html
commands_pre =
commands_post =

[testenv:integration]
# tests use these containers in various ways -- the full documentation
# is in the test cases themselves. but briefly, two running instances
# of the tcp-udp-test image are used for checking port mapping & linking
# behavior; and two running instances of the healthcheck container are
# used for testing health checking behavior
docker =
    networking-one
    networking-two
    healthcheck-builtin
    healthcheck-custom
deps =
    pytest
setenv =
    VOLUME_DIR={toxworkdir}
commands =
    py.test [] {toxinidir}/tox_docker
    python -c 'import os; os.remove(os.environ["VOLUME_DIR"] + "/healthy")'

[testenv:mypy-tox3]
skip_install = true
deps =
    mypy==0.910
commands =
    mypy --exclude tox4 {toxinidir}/tox_docker

[testenv:mypy-tox4]
skip_install = true
deps =
    mypy==0.910
commands =
    mypy --exclude tox3 {toxinidir}/tox_docker

[docker:networking-one]
image = ksdn117/tcp-udp-test
ports =
    0:1234/tcp
    0:5678/udp

[docker:networking-two]
# along with networking-one, proves we can run multiple copies of the same image
image = ksdn117/tcp-udp-test
privileged = off
ports = 2345:1234/tcp
links = networking-one:linked_host

[docker:healthcheck-builtin]
dockerfile = {toxinidir}/docker-images/healthcheck/Dockerfile
# the default health check start period seems to be 30s, make tests faster
healthcheck_interval = 1
healthcheck_timeout = 1
healthcheck_start_period = 1

[docker:healthcheck-custom]
# specify image as full registry URL to prove we can pull that way
image = docker.io/toxdocker/healthcheck:latest
privileged = true
healthcheck_cmd = touch /healthcheck/web/healthy
healthcheck_interval = 1
healthcheck_timeout = 1
healthcheck_start_period = 1
volumes =
    bind:rw:{toxworkdir}:/healthcheck/web

# do NOT add this env to the envlist; it is supposed to fail,
# and the CI scripts run it directly with this expectation
[testenv:healthcheck-failing]
skip_install = true
commands = python -c ""
docker = healthcheck-failing

[docker:healthcheck-failing]
# we don't need redis in particular, just anything with /bin/false
# (we use this since the CI test runs will have already pulled it)
image = toxdocker/healthcheck
healthcheck_cmd = /bin/false
healthcheck_interval = 1
healthcheck_timeout = 1
healthcheck_retries = 3
healthcheck_start_period = 0
